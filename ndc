#!/bin/bash
# Copyright 2024-2025 , NanyaTK

if [ -z "$1" ]; then
  echo "Usage: ndc <option>"
  echo "cd shortcut               : ndc -d <folder_number>"
  echo "cd home                   : ndc -h"
  echo "show Directory structure  : ndc -s <target_path>"
  echo "auto folder manager       : ndc -a <folder_name>"
  echo "compress folder           : ndc -x"
elif [ "$1" = "--help" ]; then # help
  echo "cd shortcut               : ndc -d <folder_number>"
  echo "cd home                   : ndc -h"
  echo "show Directory structure  : ndc -s <target_path>"
  echo "auto folder manager       : ndc -a <folder_name>"
  echo "compress folder           : ndc -x"
elif [ "$1" = "-d" ]; then # cd directory
  if [ -z "$2" ]; then
    echo "Usage: ndc -d <folder_number>"
  else
    BASE_DIR="/mnt/h"
    TARGET_NUMBER="$2"
    CURRENT_DIR="$BASE_DIR"
    for (( i=1; i<=3; i++ )); do
      PART=${TARGET_NUMBER:0:i}
      if [ -z "$PART" ]; then
        break
      fi
      # update taeget directory
      CURRENT_DIR="$CURRENT_DIR/${PART}*"
      # move target directory
      MATCH=$(ls -d $CURRENT_DIR 2>/dev/null | head -n 1)
      if [ -z "$MATCH" ]; then
        echo "Directory matching $CURRENT_DIR does not exist"
      else
        cd "$MATCH"
        echo "Moved to $MATCH"
      fi
    done
    if [ "$PART" != "$TARGET_NUMBER" ]; then
      PART=${TARGET_NUMBER:0:6}

      # update target directory
      CURRENT_DIR="$CURRENT_DIR/${PART}*"

      # move target directory
      MATCH=$(ls -d $CURRENT_DIR 2>/dev/null | head -n 1)
      if [ -z "$MATCH" ]; then
        echo "Directory matching $CURRENT_DIR does not exist"
      else
        cd "$MATCH"
        echo "Moved to $MATCH"
      fi
    fi
  fi # -d option
elif [ "$1" = "-a" ]; then # auto folder manager
  CURRENT_DIR="/mnt/h"
  BASE_DIR="/mnt/h"
  while : ; do
    if ! command -v tree &> /dev/null; then
      ls -l
    else
      tree -L 1
    fi
    echo "Choose target number(3-digits), up, y or c for cancel"
    read -a in
    if [ $in = "c" ]; then
      echo "cancel."
      cd "$BASE_DIR"
      break
    elif [ $in = "y" ]; then
      # echo "$CURRENT_DIR"
      dir="$CURRENT_DIR"
      folders=$(ls -1 "$dir" 2>/dev/null | grep -E '^[0-9]+(\.[0-9]+)?_' | sort -t '.' -k1,1n -k2,2n)
      max_main=0
      max_sub=-1
      while IFS= read -r folder; do
        main=$(echo "$folder" | grep -oE '^[0-9]+')
        sub=$(echo "$folder" | grep -oE '^[0-9]+\.[0-9]+' | cut -d '.' -f 2)
        sub=${sub:-0}
        if [[ "$main" =~ ^[0-9]+$ ]] && [[ "$sub" =~ ^[0-9]+$ ]]; then
          if [ "$main" -gt "$max_main" ] || { [ "$main" -eq "$max_main" ] && [ "$sub" -gt "$max_sub" ]; }; then
            max_main=$main
            max_sub=$sub
          fi
        fi
      done <<< "$folders"
      echo "$max_main"
      echo "$max_sub"
      if [ "$max_sub" -eq 0 ]; then
        echo "zero"
        if [ "${max_main:2:1}" -ne 0 ]; then
          if [ "${max_main:2:1}" -eq 9 ]; then
            return 0
          else
            next_main=$((max_main + 1))
          fi
         elif [ "${max_main:1:1}" -ne 0 ]; then
          if [ "${max_main:1:1}" -eq 0 ]; then
            return 0
          else
            next_main=$((max_main + 10))
          fi
        elif [ "${max_main:0:1}" -ne 0 ]; then
          if [ "${max_main:0:1}" -eq 0 ]; then
            return 0
          else
            next_main=$((max_main + 100))
          fi
        fi
      else
        next_main=$max_main
        next_sub=$((max_sub + 1))
      fi
      if [ "$max_sub" -eq "0" ]; then
        new="${next_main}_$2"
        echo "$new"
        # echo "$next_main"
        # echo "$next_sub"
      else
        new="${next_main}.${next_sub}_$2"
        echo "$new"  
        # echo "$next_main"
        # echo "$next_sub"
      fi
      echo "$BASE_DIR/$2"
      echo "$CURRENT_DIR/$new"
      mv -v "$BASE_DIR/$2" "$CURRENT_DIR/$new"
      cd "$BASE_DIR"
      break
    elif [ $in = "up" ]; then
      CURRENT_DIR="${CURRENT_DIR%/*}"
      echo "$CURRENT_DIR"
      cd ../
    else
      echo "$in"
      # echo "$CURRENT_DIR"
      TEST="$CURRENT_DIR/${in}*"
      MATCH=$(ls -d $TEST 2>/dev/null | head -n 1)
      if [ -n "$MATCH" ]; then
        CURRENT_DIR="$MATCH"
      fi
      echo "$MATCH"
      cd "$MATCH"
    fi
  done
elif [ "$1" = "-s" ]; then # show directory
  if [ -z "$2" ]; then
    if ! command -v tree &> /dev/null; then
      echo "please install tree command and retry."
    else
      tree -L 2
    fi
  else
    if ! command -v tree &> /dev/null; then
      echo "please install tree command and retry."
    else
      BASE_DIR="/mnt/h"
      TARGET_NUMBER="$2"
      CURRENT_DIR="$BASE_DIR"
      TRE=${BASE_DIR}
      for (( i=1; i<=3; i++ )); do
        PART=${TARGET_NUMBER:0:i}
        if [ -z "$PART" ]; then
          break
        fi
        EXIT=${TARGET_NUMBER:i-1}
        if [ -z "$EXIT" ]; then
          break
        fi
        # update taeget directory
        CURRENT_DIR="$CURRENT_DIR/${PART}*"
        # move target directory
        MATCH=$(ls -d $CURRENT_DIR 2>/dev/null | head -n 1)
        if [ -z "$MATCH" ]; then
          echo "Directory matching $TRE/$TARGET_NUMBER* does not exist"
        else
          TRE=${MATCH}
        fi
      done
      if [ "$PART" != "$TARGET_NUMBER" ]; then
        PART=${TARGET_NUMBER:0:6}

        # update target directory
        CURRENT_DIR="$CURRENT_DIR/${PART}*"

        # move target directory
        MATCH=$(ls -d $CURRENT_DIR 2>/dev/null | head -n 1)
        if [ -z "$MATCH" ]; then
          echo "Directory matching $TRE/$TARGET_NUMBER* does not exist"
        else
          TRE=${MATCH}
        fi
      fi
      tree "$TRE" -L 2
    fi
  fi # -sd option
elif [ "$1" = "-h" ]; then # cd home
  cd "/mnt/h"
elif [ "$1" = "-x" ]; then # compress
  if ! command -v tar &> /dev/null; then
    echo "please install tar command and retry."
  else
    echo "This command take a long time. Continue? (y/n)"
    read -r answer

    if [[ "$answer" == "y" || "$answer" == "Y" ]]; then
        current_date=$(date +%Y%m%d)
        tar -cvjf "$current_date.tar.bz2" .
        echo "compress completed: $current_date.tar.bz2"
    else
        echo "cancel."
    fi
  fi
else # help
  echo "cd shortcut               : ndc -d <folder_number>"
  echo "cd home                   : ndc -h"
  echo "show Directory structure  : ndc -s <target_path>"
  echo "auto folder manager       : ndc -a <folder_name>"
  echo "compress folder           : ndc -x"
fi
